# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-11-26 17:07
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import apps.web.models.bot


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('device_uid', models.CharField(blank=True, max_length=255, null=True, verbose_name="Telegram user's id")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('token', models.CharField(max_length=1000, unique=True, validators=[apps.web.models.bot.validate_token], verbose_name='Bot token')),
                ('name', models.CharField(max_length=250, verbose_name='Bot name')),
                ('enabled', models.BooleanField(default=True, help_text='Define if bot is enabled. Active by default', verbose_name='Bot enabled')),
                ('owner', models.ForeignKey(blank=True, help_text='User that owns this bot', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='telegram_bots', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('user_api', models.OneToOneField(blank=True, help_text='API user. Automatically retrieved from Telegram', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='telegram_bot', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Bot',
                'verbose_name_plural': 'Bots',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('value', models.CharField(max_length=1000, verbose_name='Proper answer')),
                ('rule', models.CharField(choices=[('full_coincidence', 'Full coincidence'), ('to_be_in', 'To be in'), ('starts_with', 'Starts with'), ('ends_with', 'Ends with'), ('contain_an_image', 'Contain an image'), ('contain_a_file', 'Contain a file'), ('contain_an_audio', 'Contain a audio'), ('contain_a_video', 'Contain a video'), ('received_before', 'Received before'), ('received_after', 'Received after')], default='full_coincidence', max_length=255, verbose_name='Step title')),
                ('pattern', models.CharField(help_text='Helps to determine the truth for some rules', max_length=500, verbose_name='Regex pattern')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=255, verbose_name='Event name')),
                ('send_date', models.DateTimeField(verbose_name='Time to send on')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Handler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('ids_expression', models.CharField(default='{}', help_text='Validate a set of rules by condition id', max_length=500, verbose_name="Mathematics expression from ids. Allowed '+*()!'")),
                ('slug', models.CharField(blank=True, max_length=255, null=True, verbose_name='Handler command')),
                ('title', models.CharField(max_length=255, verbose_name='Handler title')),
                ('allowed', models.ManyToManyField(blank=True, related_name='handlers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Handler',
                'verbose_name_plural': 'Handlers',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('message_id', models.BigIntegerField(db_index=True, help_text='Telegram message id retrieved from API', verbose_name='Message id')),
                ('chat', models.BigIntegerField(help_text='Retrieved from Telegram API chat id', verbose_name='Chat id')),
                ('text', models.CharField(max_length=2500, verbose_name='Message text')),
                ('from_user', models.ForeignKey(help_text='Retrieved user from', on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL, verbose_name='From User')),
                ('handler', models.ForeignKey(blank=True, help_text='Handler contains expression needed to process a message', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='web.Handler', verbose_name='Handler')),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(max_length=255, verbose_name='Quest name')),
                ('description', models.TextField(max_length=1000, verbose_name='Quest description')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(max_length=1000, verbose_name='Response title')),
                ('on_true', models.BooleanField(default=True, verbose_name='Triggering on true')),
                ('message', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Response message')),
                ('file', models.FileField(blank=True, null=True, upload_to='', verbose_name='Attached file')),
                ('redirect_to', models.ManyToManyField(blank=True, related_name='redirected_responses', to=settings.AUTH_USER_MODEL, verbose_name='Redirect to users')),
                ('requests', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='web.Handler', verbose_name='Attached handler to')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('modified', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(max_length=255, verbose_name='Step title')),
                ('number', models.PositiveIntegerField(verbose_name='Step Number')),
                ('status', models.CharField(choices=[('not_started', 'Not started'), ('in_process', 'In process'), ('finished', 'Finished')], default='not_started', max_length=255, verbose_name='Status of step')),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='web.Quest')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='handler',
            name='steps',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='handlers', to='web.Step'),
        ),
        migrations.AddField(
            model_name='event',
            name='responses',
            field=models.ManyToManyField(blank=True, related_name='events', to='web.Response', verbose_name='Responses that are used in the event'),
        ),
        migrations.AddField(
            model_name='event',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='events', to=settings.AUTH_USER_MODEL, verbose_name='Users to send to'),
        ),
        migrations.AddField(
            model_name='condition',
            name='handler',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='web.Handler', verbose_name='Attached to handler'),
        ),
        migrations.AddField(
            model_name='appuser',
            name='steps',
            field=models.ManyToManyField(blank=True, related_name='users', to='web.Step', verbose_name="User's level"),
        ),
        migrations.AddField(
            model_name='appuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
